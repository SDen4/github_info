{"version":3,"file":"static/js/57.da856cb7.chunk.js","mappings":"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","sources":["webpack://github_info/./src/components/Note/styles.module.css?d28f","components/Note/Note.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"component\":\"styles_component__9t3ni\",\"form\":\"styles_form__aUaL1\",\"buttonDel\":\"styles_buttonDel__bnquf\",\"buttonUnactive\":\"styles_buttonUnactive__yDK7E\",\"btnsWrapper\":\"styles_btnsWrapper__AHt0O\",\"noteModal\":\"styles_noteModal__TYDXc\",\"btnsModalWrapper\":\"styles_btnsModalWrapper__hsWae\",\"colorText\":\"styles_colorText__OKtNF\",\"formFooter\":\"styles_formFooter__NGy0w\",\"lettersQuantity\":\"styles_lettersQuantity__-l2zy\"};","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { Flex } from '../../ui/Flex';\n\nimport {\n  fetchFavoriteList,\n  fetchFavoriteListAdd,\n  fetchNote,\n  setFavoriteBtnFlag,\n  setFavoriteUser,\n  setNote,\n  setNoteBtn,\n} from '../../store/FavoriteReduser/actions/actions';\nimport {\n  favoriteListSelect,\n  noteSelect,\n} from '../../store/FavoriteReduser/selectors';\nimport { userSelect } from '../../store/SearchReducer/selectors';\n\nimport styles from './styles.module.css';\n\nconst Note: React.FC = () => {\n  const dispatch = useDispatch();\n  const ref: any = useRef();\n\n  const user = useSelector(userSelect);\n  const note = useSelector(noteSelect);\n  const favoriteList = useSelector(favoriteListSelect);\n\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  const [value, setValue] = useState<string>(note);\n  const [isModalOpened, setIsModalOpened] = useState<boolean>(false);\n\n  const onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event,\n  ) => {\n    if (!event.target.value.trim()) {\n      return;\n    }\n    setValue(event.target.value);\n  };\n\n  const onCancelHandler = () => {\n    dispatch(setNote(false));\n    setValue('');\n  };\n\n  const onSubmitHandler = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    if (favoriteList.find((el) => el.name === user.login)) {\n      // user is in favoriteList yet\n\n      dispatch(fetchNote(value));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(true));\n      setValue('');\n\n      const newfavoriteUser = { name: user.login, note: value };\n      const findUser: any = favoriteList.find((el) => el.name === user.login);\n      const index = favoriteList.indexOf(findUser);\n      const newFavorites = [...favoriteList];\n      newFavorites[index] = newfavoriteUser;\n\n      dispatch(fetchFavoriteList(newFavorites));\n      localStorage.setItem('favorite', JSON.stringify(newFavorites));\n    } else {\n      // user isn't in favoriteList yet\n\n      dispatch(fetchNote(value));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(true));\n      setValue('');\n\n      const newfavoriteUser = { name: user.login, note: value };\n      dispatch(fetchFavoriteListAdd(newfavoriteUser));\n      localStorage.setItem(\n        'favorite',\n        JSON.stringify([...favoriteList, newfavoriteUser]),\n      );\n\n      dispatch(setFavoriteUser(true));\n      dispatch(setFavoriteBtnFlag(true));\n    }\n  };\n\n  const onBtnModalHandler = (action: boolean) => {\n    if (action) {\n      setValue('');\n\n      const newfavoriteUserList = favoriteList.map((el) => {\n        if (el.name === user.login) {\n          return { name: user.login };\n        }\n        return el;\n      });\n\n      localStorage.setItem('favorite', JSON.stringify(newfavoriteUserList));\n\n      dispatch(fetchNote(''));\n      dispatch(fetchFavoriteList(newfavoriteUserList));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(false));\n    } else {\n      setIsModalOpened(false);\n    }\n  };\n\n  return (\n    <Flex className={styles.component}>\n      <form className={styles.form} onSubmit={onSubmitHandler}>\n        <textarea onChange={onChangeHandler} value={value} ref={ref} />\n\n        <footer className={styles.formFooter}>\n          <div className={styles.lettersQuantity}>\n            {value.length ? `Characters: ${value.length}` : ''}\n          </div>\n          <div className={styles.btnsWrapper}>\n            <button type=\"button\" onClick={onCancelHandler}>\n              Cancel\n            </button>\n\n            {value && (\n              <button\n                type=\"button\"\n                className={styles.buttonDel}\n                onClick={() => setIsModalOpened(true)}\n              >\n                Delete\n              </button>\n            )}\n\n            <button\n              type=\"submit\"\n              className={clsx(!value && styles.buttonUnactive)}\n              disabled={!value}\n            >\n              Save and add to favorite list\n            </button>\n          </div>\n        </footer>\n      </form>\n\n      {isModalOpened && (\n        <div className={styles.noteModal}>\n          <span>\n            Are you sure to delete the note of{' '}\n            <span className={styles.colorText}>{user.login}</span>?\n          </span>\n          <div className={styles.btnsModalWrapper}>\n            <button type=\"button\" onClick={() => onBtnModalHandler(true)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => onBtnModalHandler(false)}>\n              Cansel\n            </button>\n          </div>\n        </div>\n      )}\n    </Flex>\n  );\n};\n\nexport default memo(Note);\n"],"names":["Note","dispatch","useDispatch","ref","useRef","user","useSelector","userSelect","note","noteSelect","favoriteList","favoriteListSelect","useEffect","current","focus","useState","value","setValue","isModalOpened","setIsModalOpened","onBtnModalHandler","action","newfavoriteUserList","map","el","name","login","localStorage","setItem","JSON","stringify","fetchNote","fetchFavoriteList","setNote","setNoteBtn","Flex","className","styles","onSubmit","event","preventDefault","find","newfavoriteUser","findUser","index","indexOf","newFavorites","fetchFavoriteListAdd","setFavoriteUser","setFavoriteBtnFlag","onChange","target","trim","length","type","onClick","clsx","disabled","memo"],"sourceRoot":""}