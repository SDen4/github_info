{"version":3,"file":"static/js/213.be76d057.chunk.js","mappings":"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","sources":["webpack://github_info/./src/components/FavoriteList/FavoriteList.module.css?d4e1","components/FavoriteList/FavoriteList.tsx","webpack://github_info/./src/ui/CloseButton/CloseButton.module.css?19f6","ui/CloseButton/CloseButton.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"shlWrapper\":\"FavoriteList_shlWrapper__k9AKv\",\"list\":\"FavoriteList_list__bAxOE\",\"itemWrapper\":\"FavoriteList_itemWrapper__rPzj+\",\"shlButton\":\"FavoriteList_shlButton__XOZFu\",\"clearButton\":\"FavoriteList_clearButton__QWmsd\",\"deleteListItemBtn\":\"FavoriteList_deleteListItemBtn__brwfQ\",\"miniModal\":\"FavoriteList_miniModal__y3XB2\",\"btnsWrapper\":\"FavoriteList_btnsWrapper__SRymV\",\"deletedUserLogin\":\"FavoriteList_deletedUserLogin__mEb54\",\"icon\":\"FavoriteList_icon__rL42Z\",\"tooltip\":\"FavoriteList_tooltip__kC77y\",\"tooltipText\":\"FavoriteList_tooltipText__tSo0s\",\"downloadBtn\":\"FavoriteList_downloadBtn__iPSI0\",\"tooltipTextDownload\":\"FavoriteList_tooltipTextDownload__Ekrfl\",\"listHeader\":\"FavoriteList_listHeader__DebYj\",\"hide\":\"FavoriteList_hide__9uvoa\"};","import React, { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { Flex } from '../../ui/Flex';\nimport CloseButton from '../../ui/CloseButton';\n\nimport {\n  modalFlag,\n  reposOpenedListFlag,\n  userListOpenedFlag,\n} from '../../store/SearchReducer/actions';\nimport { searchSaga } from '../../store/SearchReducer/actionsSagas';\nimport {\n  favoriteListFlag,\n  favoriteUserFlag,\n  fetchFavoriteList,\n} from '../../store/FavoriteReduser/actions';\n\nimport { AppStateType } from '../../store/RootReducer';\nimport { FavoriteUser } from '../../store/FavoriteReduser/types';\nimport { ISearhHistoryItem } from '../../store/SearchReducer/types';\n\nimport styles from './FavoriteList.module.css';\n\nconst FavoriteList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const favoriteList = useSelector<AppStateType, FavoriteUser[]>(\n    (store) => store.favorite.favoriteList,\n  );\n  const searchList = useSelector<AppStateType, ISearhHistoryItem[]>(\n    (store) => store.search.searchHistory,\n  );\n  const currentUserLogin = useSelector<AppStateType, string>(\n    (store) => store.search.user.login,\n  );\n  const userListOpened = useSelector<AppStateType, boolean>(\n    (store) => store.search.usersListOpened,\n  );\n  const reposListOpened = useSelector<AppStateType, boolean>(\n    (store) => store.search.reposListOpened,\n  );\n  const isMobile = useSelector<AppStateType, boolean>(\n    (store) => store.search.isMobile,\n  );\n  const loading = useSelector<AppStateType, boolean>(\n    (store) => store.search.loading,\n  );\n\n  const [deleteModal, setDeleteModal] = useState<boolean>(false);\n  const [deletedElem, setDeletedElem] = useState<string>('');\n\n  const closeBtnHandler = () => {\n    dispatch(favoriteListFlag(false));\n  };\n\n  const searchHistoriListBtnHandler = (login: string) => {\n    if (login === currentUserLogin) {\n      if (userListOpened) {\n        dispatch(userListOpenedFlag(false));\n      }\n      if (reposListOpened) {\n        dispatch(reposOpenedListFlag(false));\n      }\n      return;\n    }\n    dispatch(searchSaga(login, searchList, isMobile, favoriteList));\n  };\n\n  const clearBtnHandler = () => {\n    dispatch(\n      modalFlag(\n        true,\n        `Are you sure to delete ${favoriteList.length > 1 ? 'all' : ''} your ${\n          favoriteList.length > 1 ? `(${favoriteList.length})` : ''\n        } favorite ${favoriteList.length > 1 ? 'users' : 'user'}?`,\n        'favorite',\n      ),\n    );\n  };\n\n  const openDeleteModal = (delElem: string) => {\n    setDeleteModal(true);\n    setDeletedElem(delElem);\n  };\n\n  const deleteBtnHandler = (delElem: string) => {\n    const newFavoriteUsersList = favoriteList.filter(\n      (el) => el.name !== delElem,\n    );\n    dispatch(fetchFavoriteList(newFavoriteUsersList));\n    localStorage.setItem('favorite', JSON.stringify(newFavoriteUsersList));\n    if (currentUserLogin === delElem) {\n      dispatch(favoriteUserFlag(false));\n    }\n    setDeleteModal(false);\n    setDeletedElem('');\n  };\n\n  const cancelDelete = () => {\n    setDeleteModal(false);\n    setDeletedElem('');\n  };\n\n  // const onDownloadHandler = () => {\n  // let element = document.createElement('a');\n  // const usersArr = favoriteList.map((el) => {\n  //   console.log(el);\n  //   return fileText(el, el.note);\n  // });\n  // const text = fileText(user, note);\n  // element.setAttribute(\n  //   'href',\n  //   `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`,\n  // );\n  // element.setAttribute('download', `${user.login}.doc`);\n  // element.style.display = 'none';\n  // document.body.appendChild(element);\n  // element.click();\n  // document.body.removeChild(element);\n  // };\n\n  return (\n    <Flex\n      className={clsx(styles.shlWrapper, isMobile && loading && styles.hide)}\n    >\n      <div className={styles.listHeader}>\n        <h3>Favorite list</h3>\n        <CloseButton onClick={closeBtnHandler} />\n      </div>\n      {/* <button\n          type=\"button\"\n          className={clsx(styles.button, styles.downloadBtn, styles.tooltip)}\n          onClick={onDownloadHandler}\n        >\n          <span>&#10515;</span>\n          <div className={clsx(styles.tooltipText, styles.tooltipTextDownload)}>\n            Download list\n          </div>\n        </button> */}\n\n      <ol className={styles.list}>\n        {favoriteList.map((el) => (\n          <li key={el.name}>\n            <div className={styles.itemWrapper}>\n              <button\n                className={styles.shlButton}\n                type=\"button\"\n                onClick={() => searchHistoriListBtnHandler(el.name)}\n              >\n                {el.name}\n              </button>\n\n              {el.note && <div className={styles.icon}>&#9998;</div>}\n\n              <button\n                type=\"button\"\n                className={clsx(styles.deleteListItemBtn, styles.tooltip)}\n                onClick={() => openDeleteModal(el.name)}\n              >\n                <div className={styles.tooltipText}>Delete</div>\n              </button>\n            </div>\n          </li>\n        ))}\n      </ol>\n\n      <button\n        className={styles.clearButton}\n        type=\"button\"\n        onClick={clearBtnHandler}\n      >\n        Delete all favorite users\n      </button>\n\n      {deleteModal && (\n        <Flex className={styles.miniModal}>\n          <span>\n            Are you sure to delete user{' '}\n            <span className={styles.deletedUserLogin}>{deletedElem}</span> from\n            favorite list?\n          </span>\n          <div className={styles.btnsWrapper}>\n            <button type=\"button\" onClick={() => deleteBtnHandler(deletedElem)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => cancelDelete()}>\n              Cansel\n            </button>\n          </div>\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nexport default memo(FavoriteList);\n","// extracted by mini-css-extract-plugin\nexport default {\"closeBtn\":\"CloseButton_closeBtn__oXC4p\",\"tooltip\":\"CloseButton_tooltip__zST3S\",\"tooltipText\":\"CloseButton_tooltipText__LUSor\"};","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './CloseButton.module.css';\n\nexport interface IProps {\n  onClick: () => void;\n}\n\nconst CloseButton: React.FC<IProps> = ({ onClick }) => {\n  return (\n    <button\n      className={clsx(styles.closeBtn, styles.tooltip)}\n      type=\"button\"\n      aria-label=\"Close\"\n      onClick={onClick}\n    >\n      <div className={styles.tooltipText}>Close</div>\n    </button>\n  );\n};\n\nexport default memo(CloseButton);\n"],"names":["FavoriteList","dispatch","useDispatch","favoriteList","useSelector","store","favorite","searchList","search","searchHistory","currentUserLogin","user","login","userListOpened","usersListOpened","reposListOpened","isMobile","loading","useState","deleteModal","setDeleteModal","deletedElem","setDeletedElem","Flex","className","clsx","styles","CloseButton","onClick","favoriteListFlag","map","el","type","userListOpenedFlag","reposOpenedListFlag","searchSaga","searchHistoriListBtnHandler","name","note","delElem","modalFlag","length","newFavoriteUsersList","filter","fetchFavoriteList","localStorage","setItem","JSON","stringify","favoriteUserFlag","deleteBtnHandler","memo"],"sourceRoot":""}