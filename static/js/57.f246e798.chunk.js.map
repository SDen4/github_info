{"version":3,"file":"static/js/57.f246e798.chunk.js","mappings":"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","sources":["webpack://github_info/./src/components/Note/styles.module.css?d28f","components/Note/Note.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"component\":\"styles_component__9t3ni\",\"form\":\"styles_form__aUaL1\",\"buttonDel\":\"styles_buttonDel__bnquf\",\"buttonUnactive\":\"styles_buttonUnactive__yDK7E\",\"btnsWrapper\":\"styles_btnsWrapper__AHt0O\",\"noteModal\":\"styles_noteModal__TYDXc\",\"btnsModalWrapper\":\"styles_btnsModalWrapper__hsWae\",\"colorText\":\"styles_colorText__OKtNF\",\"formFooter\":\"styles_formFooter__NGy0w\",\"lettersQuantity\":\"styles_lettersQuantity__-l2zy\"};","import React, { FC, memo, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { Flex } from 'ui/Flex';\n\nimport { favoriteListSelect, noteSelect } from 'selectors/favorite';\nimport { userSelect } from 'selectors/search';\n\nimport {\n  fetchFavoriteList,\n  fetchNote,\n  setFavoriteBtnFlag,\n  setFavoriteUser,\n  setNote,\n  setNoteBtn,\n} from 'store/FavoriteReduser/favoriteReducer';\n\nimport styles from './styles.module.css';\n\nconst Note: FC = () => {\n  const dispatch = useDispatch();\n  const ref: any = useRef();\n\n  const user = useSelector(userSelect);\n  const note = useSelector(noteSelect);\n  const favoriteList = useSelector(favoriteListSelect);\n\n  useEffect(() => {\n    ref.current.focus();\n\n    ref.current.setSelectionRange(\n      ref.current.value.length,\n      ref.current.value.length,\n    );\n  }, []);\n\n  const [value, setValue] = useState(note);\n  const [isModalOpened, setIsModalOpened] = useState(false);\n\n  const onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event,\n  ) => {\n    if (event.target.value === ' ' && value.length === 0) {\n      return;\n    }\n\n    setValue(event.target.value);\n  };\n\n  const onCancelHandler = () => {\n    dispatch(setNote(false));\n    setValue('');\n  };\n\n  const onSubmitHandler = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    if (favoriteList.find((el) => el.name === user.login)) {\n      // user is in favoriteList yet\n\n      dispatch(fetchNote(value.trim()));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(true));\n      setValue('');\n\n      const newfavoriteUser = { name: user.login, note: value };\n      const findUser: any = favoriteList.find((el) => el.name === user.login);\n      const index = favoriteList.indexOf(findUser);\n      const newFavorites = [...favoriteList];\n      newFavorites[index] = newfavoriteUser;\n\n      dispatch(fetchFavoriteList(newFavorites));\n      localStorage.setItem('favorite', JSON.stringify(newFavorites));\n    } else {\n      // user isn't in favoriteList yet\n\n      dispatch(fetchNote(value.trim()));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(true));\n      setValue('');\n\n      const newfavoriteUser = { name: user.login, note: value };\n      dispatch(fetchFavoriteList([...favoriteList, newfavoriteUser]));\n      localStorage.setItem(\n        'favorite',\n        JSON.stringify([...favoriteList, newfavoriteUser]),\n      );\n\n      dispatch(setFavoriteUser(true));\n      dispatch(setFavoriteBtnFlag(true));\n    }\n  };\n\n  const onBtnModalHandler = (action: boolean) => {\n    if (action) {\n      setValue('');\n\n      const newfavoriteUserList = favoriteList.map((el) => {\n        if (el.name === user.login) {\n          return { name: user.login };\n        }\n        return el;\n      });\n\n      localStorage.setItem('favorite', JSON.stringify(newfavoriteUserList));\n\n      dispatch(fetchNote(''));\n      dispatch(fetchFavoriteList(newfavoriteUserList));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(false));\n    } else {\n      setIsModalOpened(false);\n    }\n  };\n\n  return (\n    <Flex className={styles.component}>\n      <form className={styles.form} onSubmit={onSubmitHandler}>\n        <textarea onChange={onChangeHandler} value={value} ref={ref} />\n\n        <footer className={styles.formFooter}>\n          <div className={styles.lettersQuantity}>\n            {value.length ? `Characters: ${value.length}` : ''}\n          </div>\n          <div className={styles.btnsWrapper}>\n            <button type=\"button\" onClick={onCancelHandler}>\n              Cancel\n            </button>\n\n            {value && (\n              <button\n                type=\"button\"\n                className={styles.buttonDel}\n                onClick={() => setIsModalOpened(true)}\n              >\n                Delete\n              </button>\n            )}\n\n            <button\n              type=\"submit\"\n              className={clsx(!value && styles.buttonUnactive)}\n              disabled={!value}\n            >\n              Save and add to favorite list\n            </button>\n          </div>\n        </footer>\n      </form>\n\n      {isModalOpened && (\n        <div className={styles.noteModal}>\n          <span>\n            Are you sure to delete the note of{' '}\n            <span className={styles.colorText}>{user.login}</span>?\n          </span>\n          <div className={styles.btnsModalWrapper}>\n            <button type=\"button\" onClick={() => onBtnModalHandler(true)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => onBtnModalHandler(false)}>\n              Cansel\n            </button>\n          </div>\n        </div>\n      )}\n    </Flex>\n  );\n};\n\nexport default memo(Note);\n"],"names":["Note","dispatch","useDispatch","ref","useRef","user","useSelector","userSelect","note","noteSelect","favoriteList","favoriteListSelect","useEffect","current","focus","setSelectionRange","value","length","useState","setValue","isModalOpened","setIsModalOpened","onBtnModalHandler","action","newfavoriteUserList","map","el","name","login","localStorage","setItem","JSON","stringify","fetchNote","fetchFavoriteList","setNote","setNoteBtn","Flex","className","styles","onSubmit","event","preventDefault","find","trim","newfavoriteUser","findUser","index","indexOf","newFavorites","setFavoriteUser","setFavoriteBtnFlag","onChange","target","type","onClick","clsx","disabled","memo"],"sourceRoot":""}