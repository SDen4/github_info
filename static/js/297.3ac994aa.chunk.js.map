{"version":3,"file":"static/js/297.3ac994aa.chunk.js","mappings":"iNACA,EAA+B,4BAA/B,EAAmE,qBAAnE,EAAsG,2BAAtG,EAAmJ,+B,mBCoB7IA,EAAkB,WACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAEXC,GAAYC,EAAAA,EAAAA,KAChB,SAACC,GAAD,OAAWA,EAAMC,OAAOC,SAAxB,IAEIC,GAAOJ,EAAAA,EAAAA,KACX,SAACC,GAAD,OAAWA,EAAMC,OAAOG,SAAxB,IAGIC,EAAgB,SAACC,GACjBA,GACW,WAATH,GACFP,GAASW,EAAAA,EAAAA,KAAsB,IAC/BX,GAASY,EAAAA,EAAAA,IAAgB,KACzBC,aAAaC,WAAW,UACN,aAATP,IACTP,GAASe,EAAAA,EAAAA,KAAiB,IAC1Bf,GAASgB,EAAAA,EAAAA,KAAiB,IAC1BhB,GAASiB,EAAAA,EAAAA,IAAkB,KAC3BJ,aAAaC,WAAW,aAE1Bd,GAASkB,EAAAA,EAAAA,KAAU,EAAO,GAAI,YAE9BlB,GAASkB,EAAAA,EAAAA,KAAU,EAAO,GAAI,UAEjC,EAED,OACE,SAACC,EAAA,EAAD,CAAMC,UAAWC,EAAjB,UACE,iBAAKD,UAAWC,EAAhB,WACE,0BAAOnB,KACP,iBAAKkB,UAAWC,EAAhB,WACE,mBAAQd,KAAK,SAASe,QAAS,kBAAMb,GAAc,EAApB,EAA/B,qBAGA,mBAAQF,KAAK,SAASe,QAAS,kBAAMb,GAAc,EAApB,EAA/B,wBAIF,gBAAKW,UAAWC,EAAhB,UACE,SAACE,EAAA,EAAD,CAAaD,QAAS,kBAAMb,GAAc,EAApB,UAK/B,EAED,GAAee,EAAAA,EAAAA,MAAKzB,E,+ECpEpB,EAA2B,8BAA3B,EAAmE,6BAAnE,EAA8G,iC,SCQxGwB,EAAgC,SAAC,GAAiB,IAAfD,EAAc,EAAdA,QACvC,OACE,mBACEF,WAAWK,EAAAA,EAAAA,GAAKJ,EAAiBA,GACjCd,KAAK,SACL,aAAW,QACXe,QAASA,EAJX,UAME,gBAAKF,UAAWC,EAAhB,oBAGL,EAED,GAAeG,EAAAA,EAAAA,MAAKD,E","sources":["webpack://github_info/./src/components/Modal/Modal.module.css?28d7","components/Modal/Modal.tsx","webpack://github_info/./src/ui/CloseButton/CloseButton.module.css?19f6","ui/CloseButton/CloseButton.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"modalWrapper\":\"Modal_modalWrapper__ncah9\",\"modal\":\"Modal_modal__DJDMv\",\"btnsWrapper\":\"Modal_btnsWrapper__nQTo7\",\"closeBtnWrapper\":\"Modal_closeBtnWrapper__nZDNT\"};","import React, { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Flex } from '../../ui/Flex';\nimport CloseButton from '../../ui/CloseButton';\n\nimport {\n  fetchAllHistory,\n  searchHistoryListFlag,\n  modalFlag,\n} from '../../store/SearchReducer/actions';\n\nimport { AppStateType } from '../../store/RootReducer';\n\nimport styles from './Modal.module.css';\nimport {\n  favoriteListFlag,\n  favoriteUserFlag,\n  fetchFavoriteList,\n} from '../../store/FavoriteReduser/actions';\n\nconst Modal: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const textModal = useSelector<AppStateType, string>(\n    (store) => store.search.modalText,\n  );\n  const type = useSelector<AppStateType, 'search' | 'favorite'>(\n    (store) => store.search.modalType,\n  );\n\n  const onBtnsHandler = (delStatus: boolean) => {\n    if (delStatus) {\n      if (type === 'search') {\n        dispatch(searchHistoryListFlag(false));\n        dispatch(fetchAllHistory([]));\n        localStorage.removeItem('saves');\n      } else if (type === 'favorite') {\n        dispatch(favoriteListFlag(false));\n        dispatch(favoriteUserFlag(false));\n        dispatch(fetchFavoriteList([]));\n        localStorage.removeItem('favorite');\n      }\n      dispatch(modalFlag(false, '', 'search'));\n    } else {\n      dispatch(modalFlag(false, '', 'search'));\n    }\n  };\n\n  return (\n    <Flex className={styles.modalWrapper}>\n      <div className={styles.modal}>\n        <span>{textModal}</span>\n        <div className={styles.btnsWrapper}>\n          <button type=\"button\" onClick={() => onBtnsHandler(true)}>\n            Delete\n          </button>\n          <button type=\"button\" onClick={() => onBtnsHandler(false)}>\n            Cansel\n          </button>\n        </div>\n        <div className={styles.closeBtnWrapper}>\n          <CloseButton onClick={() => onBtnsHandler(false)} />\n        </div>\n      </div>\n    </Flex>\n  );\n};\n\nexport default memo(Modal);\n","// extracted by mini-css-extract-plugin\nexport default {\"closeBtn\":\"CloseButton_closeBtn__oXC4p\",\"tooltip\":\"CloseButton_tooltip__zST3S\",\"tooltipText\":\"CloseButton_tooltipText__LUSor\"};","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './CloseButton.module.css';\n\nexport interface IProps {\n  onClick: () => void;\n}\n\nconst CloseButton: React.FC<IProps> = ({ onClick }) => {\n  return (\n    <button\n      className={clsx(styles.closeBtn, styles.tooltip)}\n      type=\"button\"\n      aria-label=\"Close\"\n      onClick={onClick}\n    >\n      <div className={styles.tooltipText}>Close</div>\n    </button>\n  );\n};\n\nexport default memo(CloseButton);\n"],"names":["Modal","dispatch","useDispatch","textModal","useSelector","store","search","modalText","type","modalType","onBtnsHandler","delStatus","searchHistoryListFlag","fetchAllHistory","localStorage","removeItem","favoriteListFlag","favoriteUserFlag","fetchFavoriteList","modalFlag","Flex","className","styles","onClick","CloseButton","memo","clsx"],"sourceRoot":""}