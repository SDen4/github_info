{"version":3,"file":"static/js/57.46426ad1.chunk.js","mappings":"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","sources":["webpack://github_info/./src/components/Note/styles.module.css?d28f","components/Note/Note.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"component\":\"styles_component__9t3ni\",\"form\":\"styles_form__aUaL1\",\"buttonDel\":\"styles_buttonDel__bnquf\",\"buttonUnactive\":\"styles_buttonUnactive__yDK7E\",\"btnsWrapper\":\"styles_btnsWrapper__AHt0O\",\"noteModal\":\"styles_noteModal__TYDXc\",\"btnsModalWrapper\":\"styles_btnsModalWrapper__hsWae\",\"colorText\":\"styles_colorText__OKtNF\",\"formFooter\":\"styles_formFooter__NGy0w\",\"lettersQuantity\":\"styles_lettersQuantity__-l2zy\"};","import React, { useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { Flex } from 'ui/Flex';\n\nimport { favoriteListSelect, noteSelect } from 'selectors/favorite';\nimport { userSelect } from 'selectors/search';\n\nimport {\n  fetchFavoriteList,\n  fetchNote,\n  setFavoriteBtnFlag,\n  setFavoriteUser,\n  setNote,\n  setNoteBtn,\n} from 'store/FavoriteReduser/favoriteReducer';\n\nimport styles from './styles.module.css';\n\nconst Note = () => {\n  const dispatch = useDispatch();\n  const ref: any = useRef();\n\n  const user = useSelector(userSelect);\n  const note = useSelector(noteSelect);\n  const favoriteList = useSelector(favoriteListSelect);\n\n  useEffect(() => {\n    ref.current.focus();\n\n    ref.current.setSelectionRange(\n      ref.current.value.length,\n      ref.current.value.length,\n    );\n  }, []);\n\n  const [value, setValue] = useState(note);\n  const [isModalOpened, setIsModalOpened] = useState(false);\n\n  const onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event,\n  ) => {\n    if (event.target.value === ' ' && value.length === 0) {\n      return;\n    }\n\n    setValue(event.target.value);\n  };\n\n  const onCancelHandler = () => {\n    dispatch(setNote(false));\n    setValue('');\n  };\n\n  const onSubmitHandler = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    if (favoriteList.find((el) => el.name === user.login)) {\n      // user is in favoriteList yet\n\n      dispatch(fetchNote(value.trim()));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(true));\n      setValue('');\n\n      const newfavoriteUser = { name: user.login, note: value };\n      const findUser: any = favoriteList.find((el) => el.name === user.login);\n      const index = favoriteList.indexOf(findUser);\n      const newFavorites = [...favoriteList];\n      newFavorites[index] = newfavoriteUser;\n\n      dispatch(fetchFavoriteList(newFavorites));\n      localStorage.setItem('favorite', JSON.stringify(newFavorites));\n    } else {\n      // user isn't in favoriteList yet\n\n      dispatch(fetchNote(value.trim()));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(true));\n      setValue('');\n\n      const newfavoriteUser = { name: user.login, note: value };\n      dispatch(fetchFavoriteList([...favoriteList, newfavoriteUser]));\n      localStorage.setItem(\n        'favorite',\n        JSON.stringify([...favoriteList, newfavoriteUser]),\n      );\n\n      dispatch(setFavoriteUser(true));\n      dispatch(setFavoriteBtnFlag(true));\n    }\n  };\n\n  const onBtnModalHandler = (action: boolean) => {\n    if (action) {\n      setValue('');\n\n      const newfavoriteUserList = favoriteList.map((el) => {\n        if (el.name === user.login) {\n          return { name: user.login };\n        }\n        return el;\n      });\n\n      localStorage.setItem('favorite', JSON.stringify(newfavoriteUserList));\n\n      dispatch(fetchNote(''));\n      dispatch(fetchFavoriteList(newfavoriteUserList));\n      dispatch(setNote(false));\n      dispatch(setNoteBtn(false));\n    } else {\n      setIsModalOpened(false);\n    }\n  };\n\n  return (\n    <Flex className={styles.component}>\n      <form className={styles.form} onSubmit={onSubmitHandler}>\n        <textarea onChange={onChangeHandler} value={value} ref={ref} />\n\n        <footer className={styles.formFooter}>\n          <div className={styles.lettersQuantity}>\n            {value.length ? `Characters: ${value.length}` : ''}\n          </div>\n          <div className={styles.btnsWrapper}>\n            <button type=\"button\" onClick={onCancelHandler}>\n              Cancel\n            </button>\n\n            {value && (\n              <button\n                type=\"button\"\n                className={styles.buttonDel}\n                onClick={() => setIsModalOpened(true)}\n              >\n                Delete\n              </button>\n            )}\n\n            <button\n              type=\"submit\"\n              className={clsx(!value && styles.buttonUnactive)}\n              disabled={!value}\n            >\n              Save and add to favorite list\n            </button>\n          </div>\n        </footer>\n      </form>\n\n      {isModalOpened && (\n        <div className={styles.noteModal}>\n          <span>\n            Are you sure to delete the note of{' '}\n            <span className={styles.colorText}>{user.login}</span>?\n          </span>\n          <div className={styles.btnsModalWrapper}>\n            <button type=\"button\" onClick={() => onBtnModalHandler(true)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => onBtnModalHandler(false)}>\n              Cansel\n            </button>\n          </div>\n        </div>\n      )}\n    </Flex>\n  );\n};\n\nexport default Note;\n"],"names":["dispatch","useDispatch","ref","useRef","user","useSelector","userSelect","note","noteSelect","favoriteList","favoriteListSelect","useEffect","current","focus","setSelectionRange","value","length","_useState","useState","_useState2","_slicedToArray","setValue","_useState3","_useState4","isModalOpened","setIsModalOpened","onBtnModalHandler","action","newfavoriteUserList","map","el","name","login","localStorage","setItem","JSON","stringify","fetchNote","fetchFavoriteList","setNote","setNoteBtn","_jsxs","Flex","className","styles","children","onSubmit","event","preventDefault","find","trim","newfavoriteUser","findUser","index","indexOf","newFavorites","_toConsumableArray","concat","setFavoriteUser","setFavoriteBtnFlag","_jsx","onChange","target","type","onClick","clsx","disabled"],"sourceRoot":""}