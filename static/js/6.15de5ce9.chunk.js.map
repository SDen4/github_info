{"version":3,"sources":["ui/CloseButton/CloseButton.module.css","ui/CloseButton/CloseButton.tsx","components/Modal/Modal.module.css","components/Modal/Modal.tsx"],"names":["module","exports","CloseButton","onClick","className","clsx","styles","closeBtn","tooltip","type","tooltipText","memo","Modal","dispatch","useDispatch","textModal","useSelector","store","search","modalText","modalType","onBtnsHandler","delStatus","searchHistoryListFlag","fetchAllHistory","localStorage","removeItem","favoriteListFlag","favoriteUserFlag","fetchFavoriteList","modalFlag","Flex","modalWrapper","modal","btnsWrapper","closeBtnWrapper"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,SAAW,8BAA8B,QAAU,6BAA6B,YAAc,iC,+GCQ1GC,EAAgC,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QACvC,OACE,wBACEC,UAAWC,YAAKC,IAAOC,SAAUD,IAAOE,SACxCC,KAAK,SACL,aAAW,QACXN,QAASA,EAJX,SAME,qBAAKC,UAAWE,IAAOI,YAAvB,oBAGL,EAEcC,iBAAKT,E,qBCrBpBF,EAAOC,QAAU,CAAC,aAAe,4BAA4B,MAAQ,qBAAqB,YAAc,2BAA2B,gBAAkB,+B,0JCoB/IW,EAAkB,WACtB,IAAMC,EAAWC,cAEXC,EAAYC,aAChB,SAACC,GAAD,OAAWA,EAAMC,OAAOC,SAAxB,IAEIV,EAAOO,aACX,SAACC,GAAD,OAAWA,EAAMC,OAAOE,SAAxB,IAGIC,EAAgB,SAACC,GACjBA,GACW,WAATb,GACFI,EAASU,aAAsB,IAC/BV,EAASW,YAAgB,KACzBC,aAAaC,WAAW,UACN,aAATjB,IACTI,EAASc,aAAiB,IAC1Bd,EAASe,aAAiB,IAC1Bf,EAASgB,YAAkB,KAC3BJ,aAAaC,WAAW,aAE1Bb,EAASiB,aAAU,EAAO,GAAI,YAE9BjB,EAASiB,aAAU,EAAO,GAAI,UAEjC,EAED,OACE,cAACC,EAAA,EAAD,CAAM3B,UAAWE,IAAO0B,aAAxB,SACE,sBAAK5B,UAAWE,IAAO2B,MAAvB,UACE,+BAAOlB,IACP,sBAAKX,UAAWE,IAAO4B,YAAvB,UACE,wBAAQzB,KAAK,SAASN,QAAS,kBAAMkB,GAAc,EAApB,EAA/B,oBAGA,wBAAQZ,KAAK,SAASN,QAAS,kBAAMkB,GAAc,EAApB,EAA/B,uBAIF,qBAAKjB,UAAWE,IAAO6B,gBAAvB,SACE,cAACjC,EAAA,EAAD,CAAaC,QAAS,kBAAMkB,GAAc,EAApB,UAK/B,EAEcV,iBAAKC,E","file":"static/js/6.15de5ce9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"closeBtn\":\"CloseButton_closeBtn__1TnKA\",\"tooltip\":\"CloseButton_tooltip__ZMtiB\",\"tooltipText\":\"CloseButton_tooltipText__2zv1M\"};","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './CloseButton.module.css';\n\nexport interface IProps {\n  onClick: () => void;\n}\n\nconst CloseButton: React.FC<IProps> = ({ onClick }) => {\n  return (\n    <button\n      className={clsx(styles.closeBtn, styles.tooltip)}\n      type=\"button\"\n      aria-label=\"Close\"\n      onClick={onClick}\n    >\n      <div className={styles.tooltipText}>Close</div>\n    </button>\n  );\n};\n\nexport default memo(CloseButton);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"modalWrapper\":\"Modal_modalWrapper__VFEZN\",\"modal\":\"Modal_modal__P3_V5\",\"btnsWrapper\":\"Modal_btnsWrapper__1VvdY\",\"closeBtnWrapper\":\"Modal_closeBtnWrapper__2jGIJ\"};","import React, { memo } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { Flex } from '../../ui/Flex';\nimport CloseButton from '../../ui/CloseButton';\n\nimport {\n  fetchAllHistory,\n  searchHistoryListFlag,\n  modalFlag,\n} from '../../store/SearchReducer/actions';\n\nimport { AppStateType } from '../../store/RootReducer';\n\nimport styles from './Modal.module.css';\nimport {\n  favoriteListFlag,\n  favoriteUserFlag,\n  fetchFavoriteList,\n} from '../../store/FavoriteReduser/actions';\n\nconst Modal: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const textModal = useSelector<AppStateType, string>(\n    (store) => store.search.modalText,\n  );\n  const type = useSelector<AppStateType, 'search' | 'favorite'>(\n    (store) => store.search.modalType,\n  );\n\n  const onBtnsHandler = (delStatus: boolean) => {\n    if (delStatus) {\n      if (type === 'search') {\n        dispatch(searchHistoryListFlag(false));\n        dispatch(fetchAllHistory([]));\n        localStorage.removeItem('saves');\n      } else if (type === 'favorite') {\n        dispatch(favoriteListFlag(false));\n        dispatch(favoriteUserFlag(false));\n        dispatch(fetchFavoriteList([]));\n        localStorage.removeItem('favorite');\n      }\n      dispatch(modalFlag(false, '', 'search'));\n    } else {\n      dispatch(modalFlag(false, '', 'search'));\n    }\n  };\n\n  return (\n    <Flex className={styles.modalWrapper}>\n      <div className={styles.modal}>\n        <span>{textModal}</span>\n        <div className={styles.btnsWrapper}>\n          <button type=\"button\" onClick={() => onBtnsHandler(true)}>\n            Delete\n          </button>\n          <button type=\"button\" onClick={() => onBtnsHandler(false)}>\n            Cansel\n          </button>\n        </div>\n        <div className={styles.closeBtnWrapper}>\n          <CloseButton onClick={() => onBtnsHandler(false)} />\n        </div>\n      </div>\n    </Flex>\n  );\n};\n\nexport default memo(Modal);\n"],"sourceRoot":""}