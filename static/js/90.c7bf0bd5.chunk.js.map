{"version":3,"file":"static/js/90.c7bf0bd5.chunk.js","mappings":"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","sources":["webpack://github_info/./src/components/FavoriteList/styles.module.css?c91b","components/FavoriteList/FavoriteList.tsx","webpack://github_info/./src/ui/CloseButton/styles.module.css?1f8d","ui/CloseButton/CloseButton.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"shlWrapper\":\"styles_shlWrapper__f-rVV\",\"list\":\"styles_list__i0M8i\",\"itemWrapper\":\"styles_itemWrapper__mxdIE\",\"shlButton\":\"styles_shlButton__pyJdW\",\"clearButton\":\"styles_clearButton__0SCFy\",\"deleteListItemBtn\":\"styles_deleteListItemBtn__GXqG4\",\"miniModal\":\"styles_miniModal__c9sGa\",\"btnsWrapper\":\"styles_btnsWrapper__7jukN\",\"deletedUserLogin\":\"styles_deletedUserLogin__i5JVT\",\"icon\":\"styles_icon__8ZZSc\",\"tooltip\":\"styles_tooltip__E903r\",\"tooltipText\":\"styles_tooltipText__WLX7l\",\"downloadBtn\":\"styles_downloadBtn__SUnD8\",\"tooltipTextDownload\":\"styles_tooltipTextDownload__pMTeA\",\"listHeader\":\"styles_listHeader__HNYoL\",\"hide\":\"styles_hide__5ou-l\"};","import React, { memo, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { CloseButton } from 'ui/CloseButton';\nimport { Flex } from 'ui/Flex';\n\nimport { favoriteListSelect } from 'selectors/favorite';\nimport {\n  isLoadingSelect,\n  isMobileSelect,\n  isReposListSelect,\n  isUsersListSelect,\n  searchListSelect,\n  userSelect,\n} from 'selectors/search';\n\nimport {\n  fetchFavoriteList,\n  setFavoriteList,\n  setFavoriteUser,\n} from 'store/FavoriteReduser/favoriteReducer';\nimport {\n  setModal,\n  setReposList,\n  setUsersList,\n} from 'store/SearchReducer/actions/actions';\nimport { getGithubUserSaga } from 'store/SearchReducer/actions/actionsSagas';\n\nimport styles from './styles.module.css';\n\nconst FavoriteList: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const favoriteList = useSelector(favoriteListSelect);\n  const searchList = useSelector(searchListSelect);\n  const user = useSelector(userSelect);\n  const isUsersList = useSelector(isUsersListSelect);\n  const isReposList = useSelector(isReposListSelect);\n  const isMobile = useSelector(isMobileSelect);\n  const isLoading = useSelector(isLoadingSelect);\n\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [deletedElem, setDeletedElem] = useState('');\n\n  const closeBtnHandler = () => {\n    dispatch(setFavoriteList(false));\n  };\n\n  const searchHistoriListBtnHandler = (login: string) => {\n    if (login === user.login) {\n      if (isUsersList) {\n        dispatch(setUsersList(false));\n      }\n      if (isReposList) {\n        dispatch(setReposList(false));\n      }\n      return;\n    }\n    dispatch(getGithubUserSaga(login, searchList, favoriteList));\n  };\n\n  const clearBtnHandler = () => {\n    dispatch(\n      setModal({\n        isModal: true,\n        modalText: `Are you sure to delete ${\n          favoriteList.length > 1 ? 'all' : ''\n        } your ${\n          favoriteList.length > 1 ? `(${favoriteList.length})` : ''\n        } favorite ${favoriteList.length > 1 ? 'users' : 'user'}?`,\n        modalType: 'favorite',\n      }),\n    );\n  };\n\n  const openDeleteModal = (delElem: string) => {\n    setDeleteModal(true);\n    setDeletedElem(delElem);\n  };\n\n  const deleteBtnHandler = (delElem: string) => {\n    const newFavoriteUsersList = favoriteList.filter(\n      (el) => el.name !== delElem,\n    );\n    dispatch(fetchFavoriteList(newFavoriteUsersList));\n    localStorage.setItem('favorite', JSON.stringify(newFavoriteUsersList));\n    if (user.login === delElem) {\n      dispatch(setFavoriteUser(false));\n    }\n    setDeleteModal(false);\n    setDeletedElem('');\n  };\n\n  const cancelDelete = () => {\n    setDeleteModal(false);\n    setDeletedElem('');\n  };\n\n  // const onDownloadHandler = () => {\n  // let element = document.createElement('a');\n  // const usersArr = favoriteList.map((el) => {\n  //   console.log(el);\n  //   return fileText(el, el.note);\n  // });\n  // const text = fileText(user, note);\n  // element.setAttribute(\n  //   'href',\n  //   `data:text/plain;charset=utf-8,${encodeURIComponent(text)}`,\n  // );\n  // element.setAttribute('download', `${user.login}.doc`);\n  // element.style.display = 'none';\n  // document.body.appendChild(element);\n  // element.click();\n  // document.body.removeChild(element);\n  // };\n\n  return (\n    <Flex\n      className={clsx(styles.shlWrapper, isMobile && isLoading && styles.hide)}\n    >\n      <div className={styles.listHeader}>\n        <h3>Favorite list</h3>\n        <CloseButton onClick={closeBtnHandler} />\n      </div>\n      {/* <button\n          type=\"button\"\n          className={clsx(styles.button, styles.downloadBtn, styles.tooltip)}\n          onClick={onDownloadHandler}\n        >\n          <span>&#10515;</span>\n          <div className={clsx(styles.tooltipText, styles.tooltipTextDownload)}>\n            Download list\n          </div>\n        </button> */}\n\n      <ol className={styles.list}>\n        {favoriteList.map((el) => (\n          <li key={el.name}>\n            <div className={styles.itemWrapper}>\n              <button\n                className={styles.shlButton}\n                type=\"button\"\n                onClick={() => searchHistoriListBtnHandler(el.name)}\n              >\n                {el.name}\n              </button>\n\n              {el.note && <div className={styles.icon}>&#9998;</div>}\n\n              <button\n                type=\"button\"\n                className={clsx(styles.deleteListItemBtn, styles.tooltip)}\n                onClick={() => openDeleteModal(el.name)}\n              >\n                <div className={styles.tooltipText}>Delete</div>\n              </button>\n            </div>\n          </li>\n        ))}\n      </ol>\n\n      <button\n        className={styles.clearButton}\n        type=\"button\"\n        onClick={clearBtnHandler}\n      >\n        Delete all favorite users\n      </button>\n\n      {deleteModal && (\n        <Flex className={styles.miniModal}>\n          <span>\n            Are you sure to delete user{' '}\n            <span className={styles.deletedUserLogin}>{deletedElem}</span> from\n            favorite list?\n          </span>\n          <div className={styles.btnsWrapper}>\n            <button type=\"button\" onClick={() => deleteBtnHandler(deletedElem)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => cancelDelete()}>\n              Cansel\n            </button>\n          </div>\n        </Flex>\n      )}\n    </Flex>\n  );\n};\n\nexport default memo(FavoriteList);\n","// extracted by mini-css-extract-plugin\nexport default {\"closeBtn\":\"styles_closeBtn__rMvYi\",\"tooltip\":\"styles_tooltip__YJmbK\",\"tooltipText\":\"styles_tooltipText__j5iU1\"};","import React, { memo } from 'react';\nimport clsx from 'clsx';\n\nimport styles from './styles.module.css';\n\nexport const CloseButton: React.FC<{ onClick: () => void }> = memo(\n  ({ onClick }) => {\n    return (\n      <button\n        className={clsx(styles.closeBtn, styles.tooltip)}\n        type=\"button\"\n        aria-label=\"Close\"\n        onClick={onClick}\n      >\n        <div className={styles.tooltipText}>Close</div>\n      </button>\n    );\n  },\n);\n"],"names":["FavoriteList","dispatch","useDispatch","favoriteList","useSelector","favoriteListSelect","searchList","searchListSelect","user","userSelect","isUsersList","isUsersListSelect","isReposList","isReposListSelect","isMobile","isMobileSelect","isLoading","isLoadingSelect","useState","deleteModal","setDeleteModal","deletedElem","setDeletedElem","Flex","className","clsx","styles","CloseButton","onClick","setFavoriteList","map","el","type","login","setUsersList","setReposList","getGithubUserSaga","searchHistoriListBtnHandler","name","note","delElem","setModal","isModal","modalText","length","modalType","newFavoriteUsersList","filter","fetchFavoriteList","localStorage","setItem","JSON","stringify","setFavoriteUser","deleteBtnHandler","memo"],"sourceRoot":""}