{"version":3,"file":"static/js/57.de140ddc.chunk.js","mappings":"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","sources":["webpack://github_info/./src/components/Note/styles.module.css?d28f","components/Note/Note.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"component\":\"styles_component__9t3ni\",\"form\":\"styles_form__aUaL1\",\"buttonDel\":\"styles_buttonDel__bnquf\",\"buttonUnactive\":\"styles_buttonUnactive__yDK7E\",\"btnsWrapper\":\"styles_btnsWrapper__AHt0O\",\"noteModal\":\"styles_noteModal__TYDXc\",\"btnsModalWrapper\":\"styles_btnsModalWrapper__hsWae\",\"colorText\":\"styles_colorText__OKtNF\",\"formFooter\":\"styles_formFooter__NGy0w\",\"lettersQuantity\":\"styles_lettersQuantity__-l2zy\"};","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport clsx from 'clsx';\n\nimport { Flex } from '../../ui/Flex';\n\nimport {\n  favoriteUserFlag,\n  fetchFavoriteList,\n  fetchFavoriteListAdd,\n  noteBtnFlag,\n  noteFlag,\n  noteSave,\n  setFavoriteBtnFlag,\n} from '../../store/FavoriteReduser/actions';\n\nimport { AppStateType } from '../../store/RootReducer';\nimport { FavoriteUser } from '../../store/FavoriteReduser/types';\n\nimport styles from './styles.module.css';\n\nconst Note: React.FC = () => {\n  const dispatch = useDispatch();\n  const ref: any = useRef();\n\n  const note = useSelector<AppStateType, string>(\n    (store) => store.favorite.note,\n  );\n  const login = useSelector<AppStateType, string>(\n    (store) => store.search.user.login,\n  );\n  const favorites = useSelector<AppStateType, FavoriteUser[]>(\n    (store) => store.favorite.favoriteList,\n  );\n\n  useEffect(() => {\n    ref.current.focus();\n  }, []);\n\n  const [value, setValue] = useState<string>(note);\n  const [isModalOpened, setIsModalOpened] = useState<boolean>(false);\n\n  const onChangeHandler: React.ChangeEventHandler<HTMLTextAreaElement> = (\n    event,\n  ) => {\n    if (!event.target.value.trim()) {\n      return;\n    }\n    setValue(event.target.value);\n  };\n\n  const onCancelHandler = () => {\n    dispatch(noteFlag(false));\n    setValue('');\n  };\n\n  const onSubmitHandler = (event: React.SyntheticEvent) => {\n    event.preventDefault();\n\n    if (favorites.find((el) => el.name === login)) {\n      // user is in favorites yet\n\n      dispatch(noteSave(value));\n      dispatch(noteFlag(false));\n      dispatch(noteBtnFlag(true));\n      setValue('');\n\n      const newfavoriteUser = { name: login, note: value };\n      const findUser: any = favorites.find((el) => el.name === login);\n      const index = favorites.indexOf(findUser);\n      const newFavorites = [...favorites];\n      newFavorites[index] = newfavoriteUser;\n\n      dispatch(fetchFavoriteList(newFavorites));\n      localStorage.setItem('favorite', JSON.stringify(newFavorites));\n    } else {\n      // user isn't in favorites yet\n\n      dispatch(noteSave(value));\n      dispatch(noteFlag(false));\n      dispatch(noteBtnFlag(true));\n      setValue('');\n\n      const newfavoriteUser = { name: login, note: value };\n      dispatch(fetchFavoriteListAdd(newfavoriteUser));\n      localStorage.setItem(\n        'favorite',\n        JSON.stringify([...favorites, newfavoriteUser]),\n      );\n\n      dispatch(favoriteUserFlag(true));\n      dispatch(setFavoriteBtnFlag(true));\n    }\n  };\n\n  const onBtnModalHandler = (action: boolean) => {\n    if (action) {\n      setValue('');\n\n      const newfavoriteUserList = favorites.map((el) => {\n        if (el.name === login) {\n          return { name: login };\n        }\n        return el;\n      });\n\n      localStorage.setItem('favorite', JSON.stringify(newfavoriteUserList));\n\n      dispatch(noteSave(''));\n      dispatch(fetchFavoriteList(newfavoriteUserList));\n      dispatch(noteFlag(false));\n      dispatch(noteBtnFlag(false));\n    } else {\n      setIsModalOpened(false);\n    }\n  };\n\n  return (\n    <Flex className={styles.component}>\n      <form className={styles.form} onSubmit={onSubmitHandler}>\n        <textarea onChange={onChangeHandler} value={value} ref={ref} />\n\n        <footer className={styles.formFooter}>\n          <div className={styles.lettersQuantity}>\n            {value.length ? `Characters: ${value.length}` : ''}\n          </div>\n          <div className={styles.btnsWrapper}>\n            <button type=\"button\" onClick={onCancelHandler}>\n              Cancel\n            </button>\n\n            {value && (\n              <button\n                type=\"button\"\n                className={styles.buttonDel}\n                onClick={() => setIsModalOpened(true)}\n              >\n                Delete\n              </button>\n            )}\n\n            <button\n              type=\"submit\"\n              className={clsx(!value && styles.buttonUnactive)}\n              disabled={!value}\n            >\n              Save and add to favorites\n            </button>\n          </div>\n        </footer>\n      </form>\n\n      {isModalOpened && (\n        <div className={styles.noteModal}>\n          <span>\n            Are you sure to delete the note of{' '}\n            <span className={styles.colorText}>{login}</span>?\n          </span>\n          <div className={styles.btnsModalWrapper}>\n            <button type=\"button\" onClick={() => onBtnModalHandler(true)}>\n              Delete\n            </button>\n            <button type=\"button\" onClick={() => onBtnModalHandler(false)}>\n              Cansel\n            </button>\n          </div>\n        </div>\n      )}\n    </Flex>\n  );\n};\n\nexport default memo(Note);\n"],"names":["Note","dispatch","useDispatch","ref","useRef","note","useSelector","store","favorite","login","search","user","favorites","favoriteList","useEffect","current","focus","useState","value","setValue","isModalOpened","setIsModalOpened","onBtnModalHandler","action","newfavoriteUserList","map","el","name","localStorage","setItem","JSON","stringify","noteSave","fetchFavoriteList","noteFlag","noteBtnFlag","Flex","className","styles","onSubmit","event","preventDefault","find","newfavoriteUser","findUser","index","indexOf","newFavorites","fetchFavoriteListAdd","favoriteUserFlag","setFavoriteBtnFlag","onChange","target","trim","length","type","onClick","clsx","disabled","memo"],"sourceRoot":""}